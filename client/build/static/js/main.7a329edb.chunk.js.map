{"version":3,"sources":["components/navbar/Navbar.jsx","components/word/WarningMessage.jsx","components/search/Search.jsx","components/word/Home.jsx","components/word/Lemma.jsx","components/word/macraToHyphens.js","components/word/WordFromJson.jsx","components/lemmata/Lemmata.jsx","data/data-functions/countLetters.js","components/countdown/Countdown.jsx","components/countdown/CountdownHome.jsx","components/anagrams/AnagramsHome.jsx","components/anagrams/Anagrams.jsx","components/footer/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","input","replace","currentPage","root","inputTrunc","length","substr","react_default","a","createElement","className","react_router_dom","to","title","WarningMessage","Search","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","e","setState","target","value","fromUrl","handleMenu","menu","handleKeyUp","keyCode","redirect","state","react_router","pathname","concat","prefix","window","location","push","onChange","onKeyUp","Component","Home","document","components_navbar_Navbar","components_word_WarningMessage","components_search_Search","Lemma","lemma","partOfSpeech","toLowerCase","meaning","scansion","forms","cognatesMessage","cognates","macraToHyphens","macronizedWord","toDots","WordFromJson","randomWord","words","Math","ceil","random","Word","foundWord","find","word","NoMacra","mappedRhymes","mappedAnagrams","wordLemmata","mappedLemmata","plainInput","mappedDics","dictionaries","map","dic","index","key","href","Formula","Dictionary","filter","PerfectRhyme","sort","b","Sort","rhyme","AlphOrderNoMacra","anagram","LemmaArray","foundLemma","lemmata","jsonLemma","mappedForms","includes","form","lemmaForCognates","Root","mappedCognates","cognate","word_Lemma","PartOfSpeech","Meaning","Scansion","Lemmata","randomLemma","lemmaObjects","countLettersArray","json","letterCounts","i","currentWordArray","split","j","lettersArray","getOwnPropertyNames","letterCountsArray","getWeightedLetters","weightedVowels","weightedConsonants","reverse","currentLetter","vowels","consonants","randomCountdownQuestionWeighted","weightedLetters","numberOfVowels","floor","letterArray","randomVowel","numberOfConsonants","randomConsonant","join","delChars","superword","subword","string","chars","subwordObjects","wordObjects","Countdown","mappedWords","randomCountdownQuestionExample","CountdownHome","AnagramsHome","Anagrams","anagrams","increments","subwords","remaining","console","log","anagramsArray","Footer","App","path","exact","component","components_footer_Footer","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a329edb.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport './Navbar.css'\r\n\r\nconst Navbar = (props) => {\r\n    const input = props.input.replace(/-/g,\"\").replace(/\\./g,\"\")\r\n    const currentPage = props.currentPage\r\n    let root = \"../\"\r\n    if (currentPage === \"word\") {\r\n        root = \"./\"\r\n    }\r\n    let inputTrunc = input\r\n    if (inputTrunc.length>9) {\r\n        inputTrunc = input.substr(0,9)\r\n    }\r\n    return (\r\n        <ul className=\"navbar\">\r\n            {currentPage===\"word\" ? null : <li><Link to={root+input} title=\"Find lemmata, rhymes, etc.\">Latin word look-up</Link></li>}\r\n            {currentPage===\"countdown\" ? null : <li><Link to={root+\"countdown/\"+input} title=\"Find subwords\">Play Latin Countdown</Link></li>}\r\n            {currentPage===\"anagrams\" ? null : <li><Link to={root+\"anagrams/\"+inputTrunc} title=\"Find anagrams\">Find Latin anagrams</Link></li>}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from 'react';\r\nimport './WarningMessage.css'\r\n\r\nlet WarningMessage = () => {\r\n    return (\r\n        <p className=\"warning-message\">\r\n            Nota bene &mdash; I&rsquo;m still developing this website.<br />\r\n            • It may be a bit slow to load initially, but searches via the input below will be quicker.<br />\r\n            • All the data have been compiled by me, so there are occasional errors. Please check words in other dictionaries; there are links at the base of the page.<br />\r\n            • There are over 90,000 words on this site, representing more than 11,000 lemmata, but there are many more possible in Latin. I&rsquo;m frequently adding new words, but I have some way to go! In particular, prefixed words and words stressed on a grammatical ending or a common suffix have generally been omitted.<br />\r\n            • At the moment, the &ldquo;rhymes&rdquo; are determined under classical pronunciation, so (e.g.) vowel length matters. In the future, you will have other options for what kinds of rhymes you want to find.<br />\r\n            • Have fun searching!\r\n        </p>\r\n    )\r\n}\r\n\r\nexport default WarningMessage","import React, {Component} from \"react\";\r\nimport {Link, Redirect} from \"react-router-dom\";\r\nimport \"./Search.css\"\r\n\r\nclass Search extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            input: \"\",\r\n            menu: \"Perfect rhyme\",\r\n            redirect: false,\r\n            fromUrl: true\r\n        }\r\n    }\r\n\r\n    // This handles the <input> value.\r\n    handleInput = (e) => {\r\n        this.setState({input: e.target.value, fromUrl: false})\r\n    }\r\n\r\n    // This handles the menu value.\r\n    handleMenu = (e) => {\r\n        this.setState({menu: e.target.value})\r\n    }\r\n    \r\n    // This is to search when the enter key is pressed within the <input>.\r\n    handleKeyUp = (e) => {\r\n        if (e.keyCode === 13 ) {\r\n            this.setState({redirect: true, fromUrl: true})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // This gives warnings in the console because we're setting state within the render method. \r\n        // We need to set state back to redirect:false to avoid infinite redirects.\r\n        if (this.state.redirect) {\r\n            this.setState({redirect: false})\r\n            return <Redirect to={{pathname: `/${this.props.prefix}${this.state.input}`, state: {input: window.location.pathname.replace(\"/\",\"\"), redirect: false}}} push={true}/>\r\n        }\r\n        else {\r\n            return (\r\n                <div className=\"search\">\r\n                    {/* The box the word will be typed into */}\r\n                    <input \r\n                     className=\"search-input\"\r\n                     value={ this.state.fromUrl ? window.location.pathname.replace(\"/lemma/\",\"\").replace(\"/countdown\",\"\").replace(\"/anagrams\",\"\").replace(\"/\",\"\") : this.state.input }\r\n                     onChange={this.handleInput}\r\n                     onKeyUp={this.handleKeyUp}\r\n                     />\r\n                    {/* The menu to change the rhyme type displayed NOT HAVING AN EFFECT YET*/}\r\n                    {/* <div className=\"dropdown\">\r\n                        <input\r\n                        className=\"menu-input\"\r\n                        value={this.state.menu}\r\n                        onChange={this.handleMenu}\r\n                        />\r\n                        <div className=\"dropdown-content\">\r\n                            <Link className=\"dropdown-link\" to={\"/perfect/\"+this.state.input}>Perfect rhyme</Link>\r\n                            <Link className=\"dropdown-link\" to={\"/rvfc/\"+this.state.input}>Rhyme vowels and final consonants</Link>\r\n                            <Link className=\"dropdown-link\" to={\"/ecclesperfect/\"+this.state.input}>Ecclesiastical perfect rhyme</Link>\r\n                            <Link className=\"dropdown-link\" to={\"/consonyms/\"+this.state.input}>All consonants (consonyms)</Link>\r\n                        </div>\r\n                    </div> */}\r\n                    {/* What would be a \"submit\" button in a normal form */}\r\n                    <Link\r\n                     className=\"search-link\" \r\n                     to={\"/\"+this.props.prefix+this.state.input} \r\n                     title={`Search for ${this.state.input}`}\r\n                     >Search!</Link>    \r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Search","import React from 'react';\r\nimport Navbar from '../navbar/Navbar';\r\nimport WarningMessage from './WarningMessage';\r\nimport Search from '../search/Search';\r\n\r\nlet Home = () => {\r\n    document.title = \"Duncan Ritchie’s velut\"\r\n    return (\r\n        <div className=\"home\">\r\n            <h1><span className=\"title\">velut</span> &mdash; Vocābulōrum Excellentium Latīnōrum Ūtilēs Tabulae</h1>\r\n            <Navbar input=\"\" currentPage=\"word\"/>\r\n            <p>Welcome to my Useful Tables of Excellent Latin Vocabulary!</p>\r\n            <p>Search for a Latin word using the searchbar below!</p>\r\n            <WarningMessage />\r\n            <Search prefix=\"\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react';\r\n\r\nlet Lemma = (props) => {\r\n    return (\r\n        <div className=\"lemma\">\r\n            <h2>{props.lemma}</h2>\r\n            <p>Part of speech: {props.partOfSpeech.toLowerCase()}</p>\r\n            <p>Meaning: {props.meaning}</p>\r\n            {props.scansion ? <p>Scansion of lemma: {props.scansion}</p> : null}\r\n            {props.forms ? <p>Forms: {props.forms}</p> : null}\r\n            <p>{props.cognatesMessage ? props.cognatesMessage : <span>Cognates: {props.cognates}</span>}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Lemma","const macraToHyphens = (macronizedWord) => {\r\n    // Macra are converted to hyphens.\r\n    let toHyphens = macronizedWord.replace(/\\u0100/g,\"A-\").replace(/\\u0101/g,\"a-\").replace(/\\u0112/g,\"E-\").replace(/\\u0113/g,\"e-\").replace(/\\u012A/g,\"I-\").replace(/\\u012B/g,\"i-\").replace(/\\u014C/g,\"O-\").replace(/\\u014D/g,\"o-\").replace(/\\u016A/g,\"U-\").replace(/\\u016B/g,\"u-\").replace(/\\u1E7B/g,\"u-.\").replace(/\\u0232/g,\"Y-\").replace(/\\u0233/g,\"y-\")\r\n    // Acutes are converted to dots.\r\n    let toDots = toHyphens.replace(/\\u00C1/g,\"A.\").replace(/\\u00C9/g,\"E.\").replace(/\\u00CD/g,\"I.\").replace(/\\u00D3/g,\"O.\").replace(/\\u00DA/g,\"U.\").replace(/\\u00DD/g,\"Y.\").replace(/\\u00E1/g,\"a.\").replace(/\\u00E9/g,\"e.\").replace(/\\u00ED/g,\"i.\").replace(/\\u00F3/g,\"o.\").replace(/\\u00FA/g,\"u.\").replace(/\\u00FD/g,\"y.\")\r\n    // Diaereses are likewise converted to dots.\r\n    toDots = toDots.replace(/\\u00E4/g,\"a.\").replace(/\\u00EB/g,\"e.\").replace(/\\u00EF/g,\"i.\").replace(/\\u00F6/g,\"o.\").replace(/\\u00FC/g,\"u.\").replace(/\\u00FF/g,\"y.\")\r\n    return toDots\r\n}\r\n\r\nexport default macraToHyphens","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport Search from \"../search/Search\";\r\nimport words from \"../../data/words_8fields.json\";\r\nimport lemmata from \"../../data/lemmata.json\";\r\nimport dictionaries from \"../../data/dictionaries.json\";\r\nimport Lemma from \"./Lemma\";\r\nimport macraToHyphens from \"./macraToHyphens\";\r\nimport WarningMessage from \"./WarningMessage\";\r\nimport Navbar from \"../navbar/Navbar\"\r\n\r\nlet WordFromJson = (props) => {\r\n    // The word searched for comes from the window location.\r\n    let input = window.location.pathname.replace(\"/word\",\"\").replace(\"/\",\"\");\r\n    document.title = input+\" on velut\"\r\n    // Let's pick a random word to show if no words match the search.\r\n    let randomWord = words[Math.ceil(Math.random()*words.length)].Word;\r\n    // foundWord is the first object that matches the input.\r\n    // It looks for an exact match, then ignores macra and looks again, then ignores case and looks again.\r\n    let foundWord = words.find(word=>{return macraToHyphens(word.Word)===input})\r\n    if (!foundWord) {\r\n        foundWord = words.find(word=>{return word.Word===input})\r\n    }\r\n    if (!foundWord) {\r\n        foundWord = words.find(word=>{return word.NoMacra===input.replace(/[-/.]/g,\"\").replace(/\\[.*\\]/g,\"\")})\r\n    }\r\n    if (!foundWord) {\r\n        foundWord = words.find(word=>{return word.NoMacra.toLowerCase()===input.replace(/[-/.]/g,\"\").replace(/\\[.*\\]/g,\"\").toLowerCase()})\r\n    }\r\n    let mappedRhymes = [];\r\n    let mappedAnagrams = [];\r\n    let wordLemmata = [];\r\n    let mappedLemmata = [];\r\n    // Let's do dictionaries.\r\n    let plainInput = input.replace(/-/g,\"\").replace(/\\./g,\"\")\r\n    let mappedDics = dictionaries.map((dic,index)=>{\r\n        return <span key={index}><a href={dic.Formula.replace(\"INPUT\",plainInput)} title={\"Search \"+dic.Dictionary+\" for \"+plainInput}>{dic.Dictionary}</a>{index===dictionaries.length-1 ? \"\" : \",\"} </span>\r\n    })\r\n    if (foundWord) {\r\n        // Let's set the document title to the word we found.\r\n        document.title = foundWord.Word+\" on velut\"\r\n        // Let's find the rhymes.\r\n        let rhymes = words.filter((word)=>{return word.PerfectRhyme===foundWord.PerfectRhyme})\r\n        // The rhymes get sorted by Sort Column. Uncomment the enclosing if-else-statement to sort by syllable count.\r\n        let sortedRhymes = rhymes.sort((a,b)=>{\r\n            // if (a.Scansion.length===b.Scansion.length) {\r\n                if (a.Sort.replace(/•/g,\"-\")>b.Sort.replace(/•/g,\"-\")) {\r\n                    return 1\r\n                }\r\n                else {\r\n                    return -1\r\n                }\r\n            // }\r\n            // else {\r\n            //     return a.Scansion.length-b.Scansion.length\r\n            // }\r\n        })\r\n        // A react-router-dom Link is rendered for every rhyme.\r\n        mappedRhymes = sortedRhymes.map((rhyme,index)=>{return (\r\n            <span key={index}><Link to={\"/\"+macraToHyphens(rhyme.Word)} title={rhyme.Word}>{rhyme.Word}</Link> </span>\r\n        )})\r\n        // Let's find the anagrams.\r\n        let anagrams = words.filter((word)=>{return word.AlphOrderNoMacra===foundWord.AlphOrderNoMacra})\r\n        // The anagrams get sorted alphabetically.\r\n        let sortedAnagrams = anagrams.sort((a,b)=>{\r\n            if (a.NoMacra.toLowerCase()>b.NoMacra.toLowerCase()) {\r\n                return 1\r\n            }\r\n            else {\r\n                return -1\r\n            }\r\n        })\r\n        // A react-router-dom Link is rendered for every anagram.\r\n        mappedAnagrams = sortedAnagrams.map((anagram,index)=>{return (\r\n            <span key={index}><Link to={\"/\"+macraToHyphens(anagram.Word)} title={anagram.Word}>{anagram.Word}</Link> </span>\r\n        )})\r\n        // Let's do the lemmata. We will render an element for every lemma listed against the input.\r\n        wordLemmata = foundWord.LemmaArray\r\n        mappedLemmata = wordLemmata.map((lemma,index)=>{\r\n            // Let's find the lemma in the Json.\r\n            let foundLemma = lemmata.find(jsonLemma=>{return jsonLemma.Lemma===lemma})\r\n            if (foundLemma) {\r\n                // Let's get the inflected forms.\r\n                let forms = words.filter(word=>{return word.LemmaArray.includes(foundLemma.Lemma)})\r\n                // Let's render a Link for every form.\r\n                let mappedForms = forms.map((form,index)=>{\r\n                    return <span key={index}><Link title={form.Word} to={\"/\"+macraToHyphens(form.Word)}>{form.Word}</Link> </span>\r\n                })\r\n                // Let's get the cognates.\r\n                let cognates = lemmata.filter((lemmaForCognates)=>{return lemmaForCognates.Root === foundLemma.Root});\r\n                // If no etymology is given in the data, a message should appear in the cognates paragraph.\r\n                let cognatesMessage = \"\";\r\n                if (!foundLemma.Root) {\r\n                    cognatesMessage = \"I have not assigned cognates for this lemma, sorry!\"\r\n                }\r\n                // This sorts the cognates alphabetically.\r\n                let sortedCognates = cognates.sort((a,b)=>{\r\n                    if(b.NoMacra.toLowerCase() < a.NoMacra.toLowerCase()) {\r\n                        return 1\r\n                    } \r\n                    else {\r\n                        return -1\r\n                    }\r\n                });\r\n                // A react-router-dom Link is rendered for every cognate.\r\n                let mappedCognates = sortedCognates.map((cognate,index)=>{\r\n                    return <span key={index}><Link to={`/${macraToHyphens(cognate.Lemma).replace(/\\[.*\\]/g,\"\")}`} key={index} title={cognate.Lemma}> {cognate.Lemma}</Link> </span>\r\n                })\r\n                // Cognates are done. Let's put everything into the Lemma element.\r\n                return (\r\n                    <Lemma \r\n                    key={index} \r\n                    lemma={foundLemma.Lemma} \r\n                    partOfSpeech={foundLemma.PartOfSpeech} \r\n                    meaning={foundLemma.Meaning} \r\n                    scansion={foundLemma.Scansion}\r\n                    forms={mappedForms}\r\n                    cognates={mappedCognates}\r\n                    cognatesMessage={cognatesMessage}\r\n                    /> \r\n                )\r\n            }\r\n            else {\r\n                return null\r\n            }\r\n        })\r\n            \r\n    }\r\n    return (\r\n        <div className=\"word\">\r\n            <h1><span className=\"title\">velut</span> &mdash; {foundWord ? foundWord.Word : input}</h1>\r\n            <Navbar input={input} currentPage=\"word\"/>\r\n            <p>Welcome to my Useful Tables of Excellent Latin Vocabulary!</p>\r\n            <WarningMessage/>\r\n            <Search prefix=\"\"/>\r\n            <div className=\"divider\"/>\r\n            {foundWord ? <div><p>The word <strong>{foundWord.Word}</strong> could scan as {foundWord.Scansion}</p>\r\n            <p>Perfect rhymes: {mappedRhymes}</p>\r\n            <p>Anagrams: {mappedAnagrams}</p>\r\n            <div className=\"divider\"/>\r\n            <p><strong>{foundWord.Word}</strong> belongs to the following {wordLemmata.length} {wordLemmata.length===1 ? \"lemma\" : \"lemmata\"}:</p></div> : <p>Nothing was found. Try <Link to={\"/\"+macraToHyphens(randomWord)} title={randomWord}>{randomWord}</Link>.</p>}\r\n            {mappedLemmata ? mappedLemmata : null}\r\n            <div className=\"divider\"/>\r\n            <div className=\"divider\"/>\r\n            <p className=\"dictionaries\">Links to external sites: {mappedDics}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WordFromJson","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport Search from \"../search/Search\";\r\nimport lemmata from \"../../data/lemmata.json\";\r\nimport words from \"../../data/words_8fields.json\";\r\nimport Lemma from \"../word/Lemma\"\r\n\r\nlet Lemmata = (props) => {\r\n    // The word searched for comes from the window location.\r\n    let input = window.location.pathname.replace(\"/lemma\",\"\").replace(\"/\",\"\");\r\n    document.title = input+\" on velut\"\r\n    // Let's pick a random lemma to show if no lemmata match the search.\r\n    let randomLemma = lemmata[Math.ceil(Math.random()*lemmata.length)].NoMacra;\r\n    // We're filtering the Json data to lemmata that match the search.\r\n    let lemmaObjects = lemmata.filter((lemma)=>{return lemma.NoMacra.toLowerCase() === input.toLowerCase()});\r\n    // mappedLemmata will be an array of JSX elements.\r\n    let mappedLemmata = lemmaObjects.map((lemma,index)=>{\r\n        // Let's get the inflected forms.\r\n        let forms = words.filter(word=>{return word.LemmaArray.includes(lemma.Lemma)})\r\n        // Let's render a Link for every form.\r\n        let mappedForms = forms.map((form,index)=>{return <Link key={index} title={form.NoMacra} to={\"/\"+form.NoMacra}>{form.Word} </Link>})\r\n        // Let's get the cognates.\r\n        let cognates = lemmata.filter((lemmaForCognates)=>{return lemmaForCognates.Root === lemma.Root});\r\n        // If no etymology is given in the data, a message should appear in the cognates paragraph.\r\n        let cognatesMessage = \"\";\r\n        if (!lemma.Root) {\r\n            cognatesMessage = \"I have not assigned cognates for this word, sorry!\"\r\n        }\r\n        // This sorts the cognates alphabetically.\r\n        let sortedCognates = cognates.sort((a,b)=>{\r\n            if(b.NoMacra.toLowerCase() < a.NoMacra.toLowerCase()) {\r\n                return 1\r\n             } \r\n            else {\r\n                return -1\r\n            }\r\n        });\r\n        // A react-router Link is rendered for every cognate.\r\n        let mappedCognates = sortedCognates.map((cognate,index)=>{\r\n            return <Link to={`/lemma/${cognate.NoMacra}`} key={index} title={cognate.NoMacra}> {cognate.Lemma} </Link>\r\n        })\r\n        // Cognates are done. Let's put everything into the Lemma element.\r\n        return (\r\n            <Lemma \r\n            key={index} \r\n            lemma={lemma.Lemma} \r\n            partOfSpeech={lemma[\"Part of Speech\"]} \r\n            meaning={lemma.Meaning} \r\n            scansion={lemma.Scansion} \r\n            forms={mappedForms}\r\n            cognates={mappedCognates}\r\n            cognatesMessage={cognatesMessage}\r\n            /> \r\n        )\r\n    })\r\n    // Building the actual page.\r\n    return (\r\n        <div className=\"word\">\r\n            <h1><span className=\"title\">velut</span> &mdash; lemma &mdash; {input}</h1>\r\n            <p>Welcome to my Useful Tables of Excellent Latin Vocabulary!</p>\r\n            <p>I&rsquo;m still in the initial stages of creating this app&hellip;</p>\r\n            {/* Search bar and submit link */}\r\n            <Search prefix=\"lemma/\" />\r\n            {/* Telling the user what they searched for and how many results were found. */}\r\n            <p>\r\n                You searched for the lemma <strong>{window.location.pathname.replace(\"/lemma\",\"\").replace(\"/\",\"\")}</strong>. {lemmaObjects.length} matching {lemmaObjects.length===1 ? \"lemma\" : \"lemmata\"} found.\r\n            </p>\r\n            {/* If there are no results, it suggests the random lemma. If there are results, they're displayed. */}\r\n            {lemmaObjects.length===0 ? \r\n                <p>\r\n                    Try searching for a Latin lemma, such as <strong><Link to={\"./\"+randomLemma} title={randomLemma}>{randomLemma}</Link></strong>. \r\n                    (If my app is vaguely working; maybe it&rsquo;s not!)\r\n                </p>\r\n            : mappedLemmata}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Lemmata","// const lemmata = require('../lemmata.json')\r\n// const words = require('../words_8fields.json')\r\n\r\n// countLettersArray(words) = [[ 'i', 79766 ],[ 'e', 77876 ],[ 'a', 67422 ],[ 'r', 56797 ], ... ]\r\n\r\nconst countLettersArray = (json) => {\r\n    // Start with an empty object.\r\n    let letterCounts = {}\r\n    // Add key—value pairs to the object, such that each key is a letter and each value is its frequency in the NoMacra fields.\r\n    for (let i = 0; i < json.length; i++) {\r\n        let currentWordArray = json[i].NoMacra.toLowerCase().split(\"\")\r\n        for (let j = 0; j < currentWordArray.length; j++) {\r\n            if (!letterCounts[currentWordArray[j]]) {\r\n                letterCounts[currentWordArray[j]] = 1\r\n            }\r\n            else {\r\n                letterCounts[currentWordArray[j]] ++\r\n            }\r\n        }\r\n    }\r\n    // Make the keys (letters) of the object into an array.\r\n    let lettersArray = Object.getOwnPropertyNames(letterCounts)\r\n    // The keys and their values will go into a new array.\r\n    let letterCountsArray = []\r\n    // For every letter, add an array containing it and its frequency to letterCountsArray.\r\n    for (let i = 0; i < lettersArray.length; i++) {\r\n        letterCountsArray[i] = [lettersArray[i],letterCounts[lettersArray[i]]]\r\n    }\r\n    // Sort the array in descending letter frequency.\r\n    letterCountsArray.sort((a,b)=>{return b[1]-a[1]})\r\n    // Return the array\r\n    return letterCountsArray\r\n}\r\n\r\n// countLettersObject() uses the array generated by countLettersArray() to produce an object.\r\n// Each key is a single letter; each value is its frequency in the json parameter.\r\n// Because countLettersArray() sorts by frequency, countLettersObject() will also sort by frequency.\r\n// countLettersObject(words) = { i: 79766,  e: 77876,  a: 67422,  r: 56797,  s: 56207,  t: 50333,  u: 43595,  n: 40309,  c: 36754,  o: 36288,  m: 31885,  l: 29075,  p: 23236,  d: 18192,  b: 12294,  g: 11006,  v: 8976,  f: 8730,  h: 6941,  x: 4084,  q: 2481,  y: 2372,  z: 318,  k: 19 }\r\n\r\nconst countLettersObject = (json) => {\r\n    let letterCountsArray = countLettersArray(json)\r\n    let letterCountsSorted = {}\r\n    for (let i = 0; i < letterCountsArray.length; i++) {\r\n        letterCountsSorted[letterCountsArray[i][0]] = letterCountsArray[i][1]\r\n    }\r\n    return letterCountsSorted\r\n}\r\n\r\n// getWeightedLetters(words) = {vowels: [\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"o\",\"u\",\"u\",\"u\",\"u\", ... ],\r\n//                              consonants: [\"k\",\"y\",\"y\",\"q\",\"q\",\"q\",\"x\",\"x\",\"x\",\"x\", ... ]}\r\n// I.e. it's an object with two keys, each referring to an array of letters.\r\n// The least frequent letter appears once, the second least frequent twice, etc.\r\n// This is the function that the Countdown page uses to generate random Countdown strings.\r\n\r\nconst getWeightedLetters = (json) => {\r\n    let weightedVowels = []\r\n    let weightedConsonants = []\r\n    let letterCountsArray = countLettersArray(json).reverse()\r\n    for (let i = 0; i < letterCountsArray.length; i++) {\r\n        let currentLetter = letterCountsArray[i][0]\r\n        for (let j = 0; j < i; j++) {\r\n            if (currentLetter === \"a\" || currentLetter === \"e\" || currentLetter === \"i\" || currentLetter === \"o\" || currentLetter === \"u\") {\r\n                weightedVowels.push(currentLetter)\r\n            }\r\n            else {\r\n                weightedConsonants.push(currentLetter)\r\n            }\r\n        }\r\n    }\r\n    return {vowels: weightedVowels, consonants: weightedConsonants}\r\n}\r\n\r\nexport default getWeightedLetters\r\nexport {countLettersObject}","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport Search from '../search/Search'\r\nimport Navbar from '../navbar/Navbar'\r\nimport words from '../../data/words_8fields.json'\r\nimport getWeightedLetters from '../../data/data-functions/countLetters'\r\n\r\n// randomCountdownQuestion() returns a string of nine random letters, four or five of which are vowels.\r\n// This function does not get used; I use randomCountdownQuestionWeighted() instead.\r\n\r\nconst randomCountdownQuestion = () => {\r\n    // The total length of the return is 9.\r\n    const length = 9\r\n    // The number of vowels is either 4 or 5.\r\n    const numberOfVowels = 4 + Math.floor(Math.random()*2)\r\n    // Start with a blank array.\r\n    let letterArray = []\r\n    // Add the vowels.\r\n    for (let i = 0; i < numberOfVowels; i++) {\r\n        let randomNumber = Math.floor(Math.random()*5)\r\n        let randomVowel = [\"a\",\"e\",\"i\",\"o\",\"u\"][randomNumber]\r\n        letterArray.push(randomVowel)\r\n    }\r\n    // Add the consonants.\r\n    const numberOfConsonants = length - numberOfVowels\r\n    for (let i = 0; i < numberOfConsonants; i++) {\r\n        let randomNumber = Math.floor(Math.random()*18)\r\n        let randomConsonant = [\"b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"x\",\"y\",\"z\"][randomNumber]\r\n        letterArray.push(randomConsonant)\r\n    }\r\n    // Sort randomly.\r\n    const sortedLetterArray = letterArray.sort(()=>{return Math.random()-0.5})\r\n    // Return the letters joined into a string.\r\n    return sortedLetterArray.join(\"\")\r\n}\r\n\r\n// The same function as randomCountdownQuestion() above, but letters are more likely to appear \r\n// if they are more frequent in the NoMacra field of words_8fields.json\r\n\r\nconst randomCountdownQuestionWeighted = () => {\r\n    // getWeightedLetters returns an object containing an array of vowels and an array of consonants,\r\n    // repeated according to how frequently the letters appear in words.\r\n    let weightedLetters = getWeightedLetters(words)\r\n    const weightedVowels = weightedLetters.vowels\r\n    const weightedConsonants = weightedLetters.consonants\r\n    // The total length of the return is 9.\r\n    const length = 9\r\n    // The number of vowels is either 4 or 5.\r\n    const numberOfVowels = 4 + Math.floor(Math.random()*2)\r\n    // Start with a blank array.\r\n    let letterArray = []\r\n    // Add the vowels.\r\n    for (let i = 0; i < numberOfVowels; i++) {\r\n        let randomNumber = Math.floor(Math.random()*weightedVowels.length)\r\n        let randomVowel = weightedVowels[randomNumber]\r\n        letterArray.push(randomVowel)\r\n    }\r\n    // Add the consonants.\r\n    const numberOfConsonants = length - numberOfVowels\r\n    for (let i = 0; i < numberOfConsonants; i++) {\r\n        let randomNumber = Math.floor(Math.random()*weightedConsonants.length)\r\n        let randomConsonant = weightedConsonants[randomNumber]\r\n        letterArray.push(randomConsonant)\r\n    }\r\n    // Sort randomly.\r\n    const sortedLetterArray = letterArray.sort(()=>{return Math.random()-0.5})\r\n    // Return the letters joined into a string.\r\n    return sortedLetterArray.join(\"\")\r\n}\r\n\r\n// delChars() removes every character (case-insensitive) in the second parameter from the first parameter, \r\n// e.g. delChars(\"Duncanus\",\"nunc\") = \"Daus\"\r\n// e.g. delChars(\"Rīchardus\",\"hinc\") = \"Rīardus\"\r\n// e.g. delChars(\"Richardus\",\"hinc\") = \"Rardus\"\r\n\r\nconst delChars = (superword,subword) => {\r\n    let string = superword.toLowerCase()\r\n    subword = subword.toLowerCase()\r\n    let chars = subword.split(\"\")\r\n    for (let i=0; i<subword.length; i++) {\r\n        string = string.replace(chars[i],\"\")\r\n    }\r\n    return string\r\n}\r\n\r\n// subwordObjects() returns an array of objects. words.json should be passed in as the second parameter.\r\n\r\nconst subwordObjects = (input,wordObjects) => {\r\n    let filteredWordObjects = wordObjects.filter(word=>{\r\n        if (delChars(input.toLowerCase(),word.AlphOrderNoMacra).length === input.length-word.AlphOrderNoMacra.length) {\r\n            return true\r\n        }\r\n        else {\r\n            return false\r\n        }\r\n    })\r\n    let sortedWordObjects = filteredWordObjects.sort((a,b)=>{\r\n        if (a.Word.length > b.Word.length) {\r\n            return -1\r\n        }\r\n        else if (a.Word.length < b.Word.length) {\r\n            return 1\r\n        }\r\n        else if (a.NoMacra.toLowerCase() < b.NoMacra.toLowerCase()) {\r\n                return -1\r\n            }\r\n            else {\r\n                return 1\r\n            }\r\n    })\r\n    return sortedWordObjects\r\n}\r\n\r\n// <Countdown/> is a JSX element rendered at /countdown/:input\r\n\r\nconst Countdown = () => {\r\n    let input = window.location.pathname.replace(\"/countdown\",\"\").replace(\"/\",\"\")\r\n    document.title = \"Subwords of \"+input+\" on velut\"\r\n    let sortedWordObjects = subwordObjects(input,words)\r\n    let mappedWords = sortedWordObjects.map((word,index)=>{\r\n        if (delChars(input,word.AlphOrderNoMacra)) {\r\n            return <span key={index}><Link to={\"./\"+delChars(input,word.AlphOrderNoMacra)} title={\"delete \"+word.Word+\" from \"+input}>{word.Word}</Link> </span>\r\n        }\r\n        else {\r\n            return <span key={index}><strong>{word.Word}</strong> </span>\r\n        }\r\n    })\r\n    let randomCountdownQuestionExample = randomCountdownQuestionWeighted()\r\n    return (\r\n        <div className=\"word\">\r\n            <h1><span className=\"title\">velut</span> &mdash; Countdown &mdash; {input}</h1>\r\n            <Navbar input={input} currentPage=\"countdown\"/>\r\n            <div>\r\n                <Search prefix=\"countdown/\"/>\r\n                {mappedWords.length ? (\r\n                    <div>\r\n                        <p>Here {mappedWords.length === 1 ? \"is the 1 Latin word\" : `are the ${mappedWords.length} Latin words`}  that can be made out of letters in {input}. You can click on a word (other than a perfect anagram) to delete its letters from {input}.</p>\r\n                        <p>{mappedWords}</p>\r\n                    </div>\r\n                ) : (\r\n                    <p>No words found! Try a different input, such as <Link to={\"./\"+randomCountdownQuestionExample} title={\"Subwords of \"+randomCountdownQuestionExample}>{randomCountdownQuestionExample}</Link>.</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Countdown\r\nexport {randomCountdownQuestion, randomCountdownQuestionWeighted, delChars, subwordObjects}","import React from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport Search from '../search/Search'\r\nimport Navbar from '../navbar/Navbar'\r\nimport {randomCountdownQuestionWeighted} from './Countdown'\r\n\r\nconst CountdownHome = () => {\r\n    let randomCountdownQuestionExample = randomCountdownQuestionWeighted()\r\n    return (\r\n        <div className=\"countdown-home\">\r\n            <h1><span className=\"title\">velut</span> &mdash; Countdown</h1>\r\n            <Navbar input=\"\" currentPage=\"countdown\"/>\r\n            <p>This will help you find Latin words that can be made with the letters you specify. Type some letters below!</p>\r\n            <Search prefix=\"countdown/\" />\r\n            <p>Alternatively, search for a random string: <Link to={\"./\"+randomCountdownQuestionExample} title={\"Subwords of \"+randomCountdownQuestionExample}>{randomCountdownQuestionExample}</Link>.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountdownHome","import React from 'react';\r\nimport Search from '../search/Search'\r\nimport Navbar from '../navbar/Navbar'\r\n\r\nconst AnagramsHome = () => {\r\n    return (\r\n        <div className=\"anagrams-home\">\r\n            <h1><span className=\"title\">velut</span> &mdash; Anagrams</h1>\r\n            <Navbar input=\"\" currentPage=\"anagrams\"/>\r\n            <p>This will help you find Latin phrases that are anagrams! Search for something (up to about a dozen letters)!</p>\r\n            <Search prefix=\"anagrams/\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AnagramsHome","import React from 'react';\r\nimport words from \"../../data/words_8fields.json\";\r\nimport {delChars, subwordObjects} from \"../countdown/Countdown\"\r\nimport Search from '../search/Search'\r\nimport Navbar from '../navbar/Navbar'\r\n\r\n// anagrams() returns an array of strings that are multiword anagrams of input\r\n// anagramsArray() is the newer version of this function.\r\n\r\n// const anagrams = (input) => {\r\n//     input = input.toLowerCase()\r\n//     let arrayOfAnagrams = []\r\n//     let allSubwords = subwordObjects(input,words)\r\n//     console.log(\"Number of subwords: \"+allSubwords.length)\r\n//     for (let i=0; i<allSubwords.length; i++) {\r\n//         let remainingLetters = delChars(input,allSubwords[i].AlphOrderNoMacra)\r\n//         if (remainingLetters.length === 0) {\r\n//             arrayOfAnagrams.push(allSubwords[i].Word)\r\n//         }\r\n//         else {\r\n//             let subwordsOne = subwordObjects(remainingLetters,allSubwords)\r\n//             for (let j=0; j<subwordsOne.length; j++) {\r\n//                 let remainingLettersOne = delChars(remainingLetters,subwordsOne[j].AlphOrderNoMacra)\r\n//                 if (remainingLettersOne.length === 0) {\r\n//                     arrayOfAnagrams.push(allSubwords[i].Word+\" \"+subwordsOne[j].Word)\r\n//                 }\r\n//                 else {\r\n//                     let subwordsTwo = subwordObjects(remainingLettersOne,allSubwords)\r\n//                     for (let k=0; k<subwordsTwo.length; k++) {\r\n//                         let remainingLettersTwo = delChars(remainingLettersOne,subwordsTwo[k].AlphOrderNoMacra)\r\n//                         if (remainingLettersTwo.length === 0) {\r\n//                             arrayOfAnagrams.push(allSubwords[i].Word+\" \"+subwordsOne[j].Word+\" \"+subwordsTwo[k].Word)\r\n//                         }\r\n//                         else {\r\n//                             let subwordsThree = subwordObjects(remainingLettersTwo,allSubwords)\r\n//                             for (let l=0; l<subwordsThree.length; l++) {\r\n//                                 let remainingLettersThree = delChars(remainingLettersTwo,subwordsThree[l].AlphOrderNoMacra)\r\n//                                 if (remainingLettersThree.length === 0) {\r\n//                                     arrayOfAnagrams.push(allSubwords[i].Word+\" \"+subwordsOne[j].Word+\" \"+subwordsTwo[k].Word+\" \"+subwordsThree[l].Word)\r\n//                                 }\r\n//                                 else {\r\n//                                     let subwordsFour = subwordObjects(remainingLettersThree,allSubwords)\r\n//                                     for (let m=0; m<subwordsFour.length; m++) {\r\n//                                         let remainingLettersFour = delChars(remainingLettersThree,subwordsFour[m].AlphOrderNoMacra)\r\n//                                         arrayOfAnagrams.push(allSubwords[i].Word+\" \"+subwordsOne[j].Word+\" \"+subwordsTwo[k].Word+\" \"+subwordsThree[l].Word+\" \"+subwordsFour[m].Word+\" - \"+remainingLettersFour)\r\n//                                     }\r\n//                                 }\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                 }\r\n//             }\r\n//         }\r\n//     }\r\n//     return arrayOfAnagrams\r\n// }\r\n\r\nconst anagramsArray = (input) => {\r\n    input = input.toLowerCase()\r\n    let anagrams = []\r\n    let increments = []\r\n    let subwords = []\r\n    let remaining = []\r\n    subwords[0] = subwordObjects(input,words)\r\n    remaining[0] = input\r\n    console.log(\"Number of subwords: \"+subwords[0].length)\r\n\r\n    // The while-loop below was my failed attempt to condense the nested for-loops below it,\r\n    // so that the maximum number of words in an anagram was not fixed.\r\n    \r\n    // let x = 0\r\n    // while (increments[x] < subwords[x].length) {\r\n    //     for (increments[x] = 0; increments[x] < subwords[x].length ; increments[x] ++) {\r\n    //         remaining[x+1] = delChars(remaining[x], subwords[x][increments[x]].AlphOrderNoMacra)\r\n    //         if (remaining[x+1].length === 0) {\r\n    //             let newAnagram = []\r\n    //             for (let i = 0; i < x; i++) {\r\n    //                 newAnagram.push(subwords[i][increments[i]].Word)\r\n    //             }\r\n    //             anagrams.push(newAnagram.join(\" \"))\r\n    //         }\r\n    //         else {\r\n    //             subwords[x+1] = subwordObjects(remaining[x+1],subwords[x])\r\n    //             x++\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    for (increments[0]=0; increments[0]<subwords[0].length; increments[0]++) {\r\n        remaining[0] = delChars(input,subwords[0][increments[0]].AlphOrderNoMacra)\r\n        if (remaining[0].length === 0) {\r\n            anagrams.push(subwords[0][increments[0]].Word)\r\n        }\r\n        else {\r\n            subwords[1] = subwordObjects(remaining[0],subwords[0])\r\n            for (increments[1]=0; increments[1]<subwords[1].length; increments[1]++) {\r\n                remaining[1] = delChars(remaining[0],subwords[1][increments[1]].AlphOrderNoMacra)\r\n                if (remaining[1].length === 0) {\r\n                    anagrams.push(subwords[0][increments[0]].Word+\" \"+subwords[1][increments[1]].Word)\r\n                }\r\n                else {\r\n                    subwords[2] = subwordObjects(remaining[1],subwords[0])\r\n                    for (increments[2]=0; increments[2]<subwords[2].length; increments[2]++) {\r\n                        remaining[2] = delChars(remaining[1],subwords[2][increments[2]].AlphOrderNoMacra)\r\n                        if (remaining[2].length === 0) {\r\n                            anagrams.push(subwords[0][increments[0]].Word+\" \"+subwords[1][increments[1]].Word+\" \"+subwords[2][increments[2]].Word)\r\n                        }\r\n                        else {\r\n                            subwords[3] = subwordObjects(remaining[2],subwords[0])\r\n                            for (increments[3]=0; increments[3]<subwords[3].length; increments[3]++) {\r\n                                remaining[3] = delChars(remaining[2],subwords[3][increments[3]].AlphOrderNoMacra)\r\n                                if (remaining[3].length === 0) {\r\n                                    anagrams.push(subwords[0][increments[0]].Word+\" \"+subwords[1][increments[1]].Word+\" \"+subwords[2][increments[2]].Word+\" \"+subwords[3][increments[3]].Word)\r\n                                }\r\n                                else {\r\n                                    subwords[4] = subwordObjects(remaining[3],subwords[0])\r\n                                    for (increments[4]=0; increments[4]<subwords[4].length; increments[4]++) {\r\n                                        remaining[4] = delChars(remaining[3],subwords[4][increments[4]].AlphOrderNoMacra)\r\n                                        if (remaining[4].length === 0) {\r\n                                            anagrams.push(subwords[0][increments[0]].Word+\" \"+subwords[1][increments[1]].Word+\" \"+subwords[2][increments[2]].Word+\" \"+subwords[3][increments[3]].Word+\" \"+subwords[4][increments[4]].Word)\r\n                                        }\r\n                                        else {\r\n                                            subwords[5] = subwordObjects(remaining[4],subwords[0])\r\n                                            for (increments[5]=0; increments[5]<subwords[5].length; increments[5]++) {\r\n                                                remaining[5] = delChars(remaining[4],subwords[5][increments[5]].AlphOrderNoMacra)\r\n                                                if (remaining[5].length === 0) {\r\n                                                    anagrams.push(subwords[0][increments[0]].Word+\" \"+subwords[1][increments[1]].Word+\" \"+subwords[2][increments[2]].Word+\" \"+subwords[3][increments[3]].Word+\" \"+subwords[4][increments[4]].Word+\" \"+subwords[5][increments[5]].Word)\r\n                                                }\r\n                                                else {\r\n                                                    subwords[6] = subwordObjects(remaining[5],subwords[0])\r\n                                                    for (increments[6]=0; increments[6]<subwords[6].length; increments[6]++) {\r\n                                                        remaining[6] = delChars(remaining[5],subwords[6][increments[6]].AlphOrderNoMacra)\r\n                                                        if (remaining[6].length === 0) {\r\n                                                            anagrams.push(subwords[0][increments[0]].Word+\" \"+subwords[1][increments[1]].Word+\" \"+subwords[2][increments[2]].Word+\" \"+subwords[3][increments[3]].Word+\" \"+subwords[4][increments[4]].Word+\" \"+subwords[5][increments[5]].Word+\" \"+subwords[6][increments[6]].Word)\r\n                                                        }\r\n                                                        else {\r\n                                                            subwords[7] = subwordObjects(remaining[6],subwords[0])\r\n                                                            for (increments[7]=0; increments[7]<subwords[7].length; increments[7]++) {\r\n                                                                remaining[7] = delChars(remaining[6],subwords[7][increments[7]].AlphOrderNoMacra)\r\n                                                                if (remaining[7].length === 0) {\r\n                                                                    anagrams.push(subwords[0][increments[0]].Word+\" \"+subwords[1][increments[1]].Word+\" \"+subwords[2][increments[2]].Word+\" \"+subwords[3][increments[3]].Word+\" \"+subwords[4][increments[4]].Word+\" \"+subwords[5][increments[5]].Word+\" \"+subwords[6][increments[6]].Word+\" \"+subwords[7][increments[7]].Word)\r\n                                                                }\r\n                                                                else {\r\n                                                                    subwords[8] = subwordObjects(remaining[7],subwords[0])\r\n                                                                    for (increments[8]=0; increments[8]<subwords[8].length; increments[8]++) {\r\n                                                                        remaining[8] = delChars(remaining[7],subwords[8][increments[8]].AlphOrderNoMacra)\r\n                                                                        if (remaining[8].length === 0) {\r\n                                                                            anagrams.push(subwords[0][increments[0]].Word+\" \"+subwords[1][increments[1]].Word+\" \"+subwords[2][increments[2]].Word+\" \"+subwords[3][increments[3]].Word+\" \"+subwords[4][increments[4]].Word+\" \"+subwords[5][increments[5]].Word+\" \"+subwords[6][increments[6]].Word+\" \"+subwords[7][increments[7]].Word+\" \"+subwords[8][increments[8]].Word)\r\n                                                                        }\r\n                                                                        else {\r\n                                                                            subwords[9] = subwordObjects(remaining[8],subwords[0])\r\n                                                                            for (increments[9]=0; increments[9]<subwords[9].length; increments[9]++) {\r\n                                                                                remaining[9] = delChars(remaining[8],subwords[9][increments[9]].AlphOrderNoMacra)\r\n                                                                                if (remaining[9].length === 0) {\r\n                                                                                    anagrams.push(subwords[0][increments[0]].Word+\" \"+subwords[1][increments[1]].Word+\" \"+subwords[2][increments[2]].Word+\" \"+subwords[3][increments[3]].Word+\" \"+subwords[4][increments[4]].Word+\" \"+subwords[5][increments[5]].Word+\" \"+subwords[6][increments[6]].Word+\" \"+subwords[7][increments[7]].Word+\" \"+subwords[8][increments[8]].Word+\" \"+subwords[9][increments[9]].Word)\r\n                                                                                }\r\n                                                                                else {\r\n                                                                                    subwords[10] = subwordObjects(remaining[9],subwords[0])\r\n                                                                                    for (increments[10]=0; increments[10]<subwords[10].length; increments[10]++) {\r\n                                                                                        remaining[10] = delChars(remaining[9],subwords[10][increments[10]].AlphOrderNoMacra)\r\n                                                                                        if (remaining[10].length === 0) {\r\n                                                                                            anagrams.push(subwords[0][increments[0]].Word+\" \"+subwords[1][increments[1]].Word+\" \"+subwords[2][increments[2]].Word+\" \"+subwords[3][increments[3]].Word+\" \"+subwords[4][increments[4]].Word+\" \"+subwords[5][increments[5]].Word+\" \"+subwords[6][increments[6]].Word+\" \"+subwords[7][increments[7]].Word+\" \"+subwords[8][increments[8]].Word+\" \"+subwords[9][increments[9]].Word+\" \"+subwords[10][increments[10]].Word)\r\n                                                                                        }\r\n                                                                                        else {\r\n                                                                                            subwords[11] = subwordObjects(remaining[10],subwords[0])\r\n                                                                                            for (increments[11]=0; increments[11]<subwords[11].length; increments[11]++) {\r\n                                                                                                remaining[11] = delChars(remaining[10],subwords[11][increments[11]].AlphOrderNoMacra)\r\n                                                                                                if (remaining[11].length === 0) {\r\n                                                                                                    anagrams.push(subwords[0][increments[0]].Word+\" \"+subwords[1][increments[1]].Word+\" \"+subwords[2][increments[2]].Word+\" \"+subwords[3][increments[3]].Word+\" \"+subwords[4][increments[4]].Word+\" \"+subwords[5][increments[5]].Word+\" \"+subwords[6][increments[6]].Word+\" \"+subwords[7][increments[7]].Word+\" \"+subwords[8][increments[8]].Word+\" \"+subwords[9][increments[9]].Word+\" \"+subwords[10][increments[10]].Word+\" \"+subwords[11][increments[11]].Word)\r\n                                                                                                }\r\n                                                                                                else {\r\n                                                                                                    subwords[12] = subwordObjects(remaining[11],subwords[0])\r\n                                                                                                    for (increments[12]=0; increments[12]<subwords[12].length; increments[12]++) {\r\n                                                                                                        remaining[12] = delChars(remaining[11],subwords[12][increments[12]].AlphOrderNoMacra)\r\n                                                                                                        if (remaining[12].length === 0) {\r\n                                                                                                            anagrams.push(subwords[0][increments[0]].Word+\" \"+subwords[1][increments[1]].Word+\" \"+subwords[2][increments[2]].Word+\" \"+subwords[3][increments[3]].Word+\" \"+subwords[4][increments[4]].Word+\" \"+subwords[5][increments[5]].Word+\" \"+subwords[6][increments[6]].Word+\" \"+subwords[7][increments[7]].Word+\" \"+subwords[8][increments[8]].Word+\" \"+subwords[9][increments[9]].Word+\" \"+subwords[10][increments[10]].Word+\" \"+subwords[11][increments[11]].Word+\" \"+subwords[12][increments[12]].Word)\r\n                                                                                                        }\r\n                                                                                                    }\r\n                                                                                                }\r\n                                                                                            }\r\n                                                                                        }\r\n                                                                                    }\r\n                                                                                }\r\n                                                                            }\r\n                                                                        }\r\n                                                                    }\r\n                                                                }\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return anagrams\r\n}\r\n\r\nconst Anagrams = () => {\r\n    let input = window.location.pathname.replace(\"/anagrams\",\"\").replace(\"/\",\"\")\r\n    document.title = \"Anagrams of \"+input+\" on velut\"\r\n    let mappedAnagrams = anagramsArray(input).map((anagram,index)=>{\r\n        return <span key={index}>{anagram}<br/></span>\r\n    })\r\n    return (\r\n        <div className=\"word\">\r\n            <h1><span className=\"title\">velut</span> &mdash; Anagrams &mdash; {input}</h1>\r\n            <Navbar input={input} currentPage=\"anagrams\"/>\r\n            <p>Caution &mdash; searches longer than ten characters may take some minutes or fail completely. Anagrams longer than thirteen words will not be found.</p>\r\n            <p>{mappedAnagrams.length} anagrams have been found for <strong>{input}</strong>.</p>\r\n            <Search prefix=\"anagrams/\" />\r\n            <p>{mappedAnagrams.length ? mappedAnagrams : \"No anagrams found. Try another search.\"}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Anagrams","import React from 'react';\r\nimport \"../../App.css\"\r\nimport \"./Footer.css\"\r\n\r\nlet Footer = () => {\r\n    return (\r\n        <div className=\"footer\">\r\n            <p>&copy; Duncan Ritchie. Data do not include all lemmata in Latin, or all forms of many lemmata. See my <a href=\"https://www.duncanritchie.co.uk\" title=\"Duncan Ritchie&rsquo;s website\">website</a>.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import React, { Component } from 'react';\r\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\r\nimport Home from \"./components/word/Home\";\r\nimport WordFromJson from \"./components/word/WordFromJson\";\r\nimport Lemmata from \"./components/lemmata/Lemmata\";\r\nimport CountdownHome from \"./components/countdown/CountdownHome\";\r\nimport Countdown from \"./components/countdown/Countdown\";\r\nimport AnagramsHome from \"./components/anagrams/AnagramsHome\";\r\nimport Anagrams from \"./components/anagrams/Anagrams\";\r\nimport Footer from \"./components/footer/Footer\";\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Router>\r\n          <Switch>\r\n            <Route path=\"/\" exact component={Home} />\r\n            <Route path=\"/lemma/:word\" component={Lemmata} />\r\n            <Route path=\"/countdown/:word\" component={Countdown} />\r\n            <Route path=\"/countdown\" component={CountdownHome} />\r\n            <Route path=\"/anagrams/:word\" component={Anagrams} />\r\n            <Route path=\"/anagrams\" component={AnagramsHome} />\r\n            <Route path=\"/:word\" component={WordFromJson} />\r\n          </Switch>\r\n          <Footer />\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();"],"sourceRoot":""}