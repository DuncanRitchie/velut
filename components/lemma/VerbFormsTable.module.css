.verbFormsTable table {
  min-width: 100%;
  border-spacing: 0;
  --forms-dt-font-size: 0.875em;
}

.verbFormsTable table tr th,
.verbFormsTable table tr td {
  padding: 0.125em 0.45em;
}

.verbFormsTable table tr th:first-child {
  min-width: 10ch;
}

/* For <col> elements, width is used instead of min-width (or indeed max-width).
It’s a suggestion of how wide the columns will be, not an absolute rule.
So it doesn’t matter that the widths don’t sum to 100% (as long as they’re less than 100%),
and it doesn’t matter much that the widths don’t account for differing amounts of text in each column. */
.verbFormsTable col {
  width: 10%;
}
/* These two columns are the two columns of header cells, which do not contain any verb forms. */
/* The selector would be simply .column-1,.column-2 but CSS Modules messes with the class-names. */
.verbFormsTable col[class*='column-1'] {
  width: 5%;
}
.verbFormsTable col[class*='column-2'] {
  width: 7.5%;
}
/* This is the <col> in the infinitives table, which only has one <col> specified. */
.verbFormsTable table:nth-of-type(4) col {
  width: 17.5%;
}

.verbFormsTable table tr th:not(:empty) {
  font-style: italic;
  font-weight: bold;
  font-size: var(--forms-dt-font-size, 1em);
  color: #34311a;
  border: 1px solid transparent;
  /* This is #34311a with less opacity */
  border-top-color: hsla(53, 33%, 15%, 33.33%);
  border-left-color: hsla(53, 33%, 15%, 33.33%);
  border-radius: 0.25em 0 0 0;
}

/*
Highlight th cells when matching td/th are hovered.
The selector *= means “contains” and $= means “ends with”, so this will highlight th cells with classes that end with the substrings that the hovered cell’s class contains.
We’re writing [class*='CLASS'] and not .CLASS because we’re using CSS Modules which mangles the CSS when we use the simpler syntax.
Consequently we need to be careful that 'future' doesn’t match as a substring of 'futureperfect' & 'perfect' doesn’t match as a substring of 'imperfect', 'pluperfect', 'futureperfect'.
*/
.verbFormsTable table:has([class*='indicative']:hover) th[class$='indicative'],
.verbFormsTable table:has([class*='active']:hover) th[class$='active'],
.verbFormsTable table:has([class*='passive']:hover) th[class$='passive'],
.verbFormsTable table:has([class*='singular']:hover) th[class$='singular'],
.verbFormsTable table:has([class*='singular first']:hover) th[class$='singular first'],
.verbFormsTable table:has([class*='singular second']:hover) th[class$='singular second'],
.verbFormsTable table:has([class*='singular third']:hover) th[class$='singular third'],
.verbFormsTable table:has([class*='plural']:hover) th[class$='plural'],
.verbFormsTable table:has([class*='plural first']:hover) th[class$='plural first'],
.verbFormsTable table:has([class*='plural second']:hover) th[class$='plural second'],
.verbFormsTable table:has([class*='plural third']:hover) th[class$='plural third'],
.verbFormsTable tbody:has([class*='present']:hover) th[class$='present'],
.verbFormsTable tbody:has([class*='imperfect']:hover) th[class$='imperfect'],
.verbFormsTable tbody:has([class*='future']:not([class*='futureperfect']):hover) th[class$='future'],
.verbFormsTable tbody:has([class*=' perfect']:hover) th[class$=' perfect'],
.verbFormsTable tbody:has([class*='pluperfect']:hover) th[class$='pluperfect'],
.verbFormsTable tbody:has([class*='futureperfect']:hover) th[class$='futureperfect'],
.verbFormsTable table:has([class*='subjunctive']:hover) th[class$='subjunctive'],
.verbFormsTable table:has([class*='imperative']:hover) th[class$='imperative'],
.verbFormsTable table:has([class*='infinitive']:hover) th[class$='infinitive']:not(:empty),
.verbFormsTable table:has([class*='active present']:hover) thead th[class$='active present'],
.verbFormsTable table:has([class*='active perfect']:hover) thead th[class$='active perfect'],
.verbFormsTable table:has([class*='active future']:hover) thead th[class$='active future'],
.verbFormsTable table:has([class*='passive present']:hover) thead th[class$='passive present'],
.verbFormsTable table:has([class*='gerund']:hover) th[class$='gerund'],
.verbFormsTable table:has([class*='supine']:hover) th[class$='supine'],
.verbFormsTable table:has([class*='gerund accusative']:hover) th[class$='gerund accusative'],
.verbFormsTable table:has([class*='gerund genitive']:hover) th[class$='gerund genitive'],
.verbFormsTable table:has([class*='gerund dative']:hover) th[class$='gerund dative'],
.verbFormsTable table:has([class*='gerund ablative']:hover) th[class$='gerund ablative'],
.verbFormsTable table:has([class*='supine accusative']:hover) th[class$='supine accusative'],
.verbFormsTable table:has([class*='supine ablative']:hover) th[class$='supine ablative'] {
  background-image: linear-gradient(to bottom right, #efe1ab, transparent);
  border-top-color: #34311a;
  border-left-color: #34311a;
  color: #34311a;
}

.verbFormsTable td {
  position: relative;
}

/* The dashes are similar to those used on FormsTable, but on the right & bottom sides and only shown on hover. */
/* Dashes down the right side of data-cells */
.verbFormsTable td:hover::before {
  content: '';
  position: absolute;
  right: 0;
  bottom: 0.125em;
  width: 1px;
  height: calc(100% - 0.4625em);
  background-image: repeating-linear-gradient(0deg, #34311a, #34311a 0.25em, transparent, transparent 0.6666em);
  opacity: 0.3333;
}

/* Dashes across the bottom side of data-cells */
.verbFormsTable td:hover::after {
  content: '';
  position: absolute;
  left: 0;
  bottom: 0;
  width: calc(100% - 0.4625em);
  height: 1px;
  background-image: repeating-linear-gradient(270deg, #34311a, #34311a 0.25em, transparent, transparent 0.6666em);
  opacity: 0.3333;
}
